

% State and measurement sizes
pose_size = 3;
lmk_size = 2;

%
num_poses = 3;
num_lmks = 4;

torad = pi/180;

%factor definitions
factor{1+ 0} = struct(...
    'type' , 'pose', ...
    'measurement', [0;0;0],...
    'covariance' , 1e-3*eye(3,3),...
    'index' , 0);

% 1st solution
% factor{1+ 1} = struct(...
%     'type' , 'motion', ...
%     'measurement', [1.0;0.0;-torad*5],...
%     'covariance' , diag([1e-2, 1e-2, (torad*2)^2]),...
%     'index' , [0,1]);

% Improved solution
factor{1+ 1} = struct(...
    'type' , 'motion', ...
    'measurement', [1.0;0.05;-torad*5],...
    'covariance' , diag([1e-2, 1e-2, (torad*2)^2]),...
    'index' , [0,1]);

% 1st solution
% factor{1+ 2} = struct(...
%     'type' , 'motion', ...
%     'measurement', [1.05;-0.05;-torad*3],...
%     'covariance' , diag([1e-2, 1e-2, (torad*2)^2]),...
%     'index' , [1,2]);

% Improved solution
factor{1+ 2} = struct(...
    'type' , 'motion', ...
    'measurement', [1.0;-0.2;-torad*15],...
    'covariance' , diag([1e-2, 1e-2, (torad*10)^2]),...
    'index' , [1,2]);

factor{1+ 3} = struct(...
    'type' , 'lmk', ...
    'measurement', [1.2;torad*40],...
    'covariance' , diag([1e-2, (torad*10)^2]),...
    'index' , [0,3]);

factor{1+ 4} = struct(...
    'type' , 'lmk', ...
    'measurement', [0.8;torad*90],...
    'covariance' , diag([1e-2, (torad*5)^2]),...
    'index' , [1,3]);

% 1st solution
% factor{1+ 5} = struct(...
%     'type' , 'lmk', ...
%     'measurement', [1.2;torad*25],...
%     'covariance' , diag([1e-2, (torad*10)^2]),...
%     'index' , [1,4]);

% Improved solution
factor{1+ 5} = struct(...
    'type' , 'lmk', ...
    'measurement', [1.25;torad*30],...
    'covariance' , diag([2.25e-2, (torad*15)^2]),...
    'index' , [1,4]);

% 1st solution
% factor{1+ 6} = struct(...
%     'type' , 'lmk', ...
%     'measurement', [1.3;torad*-40],...
%     'covariance' , diag([1e-2, (torad*10)^2]),...
%     'index' , [0,5]);

% Improved solution
factor{1+ 6} = struct(...
    'type' , 'lmk', ...
    'measurement', [1.5;torad*-25],...
    'covariance' , diag([4e-2, (torad*20)^2]),...
    'index' , [0,5]);

% 1st solution
% factor{1+ 7} = struct(...
%     'type' , 'lmk', ...
%     'measurement', [0.8;torad*-75],...
%     'covariance' , diag([1e-2, (torad*10)^2]),...
%     'index' , [1,5]);

% Improved solution
factor{1+ 7} = struct(...
    'type' , 'lmk', ...
    'measurement', [0.8;torad*-70],...
    'covariance' , diag([2.25e-2, (torad*20)^2]),...
    'index' , [1,5]);

% 1st solution
% factor{1+ 8} = struct(...
%     'type' , 'lmk', ...
%     'measurement', [2.2;torad*-20],...
%     'covariance' , diag([1e-2, (torad*10)^2]),...
%     'index' , [0,6]);

% Improved solution
factor{1+ 8} = struct(...
    'type' , 'lmk', ...
    'measurement', [2.5;torad*-10],...
    'covariance' , diag([2.25e-2, (torad*10)^2]),...
    'index' , [0,6]);

% 1st solution
% factor{1+ 9} = struct(...
%     'type' , 'lmk', ...
%     'measurement', [1.4;torad*-45],...
%     'covariance' , diag([1e-2, (torad*10)^2]),...
%     'index' , [1,6]);

% Improved solution
factor{1+ 9} = struct(...
    'type' , 'lmk', ...
    'measurement', [1.55;torad*-35],...
    'covariance' , diag([2.25e-2, (torad*10)^2]),...
    'index' , [1,6]);

% 1st solution
% factor{1+ 10} = struct(...
%     'type' , 'lmk', ...
%     'measurement', [0.8;torad*-70],...
%     'covariance' , diag([1e-2, (torad*10)^2]),...
%     'index' , [2,6]);

% Improved solution
factor{1+ 10} = struct(...
    'type' , 'lmk', ...
    'measurement', [0.9;torad*-60],...
    'covariance' , diag([2.25e-2, (torad*10)^2]),...
    'index' , [2,6]);


%state definitions
states{1+ 0} = struct(...
    'type', 'pose', ...
    'range' , [1;2;3],...
    'value' , [0.8;0.1;torad*90]); %proposed initial values

states{1+ 1} = struct(...
    'type', 'pose', ...
    'range' , [4;5;6],...
    'value' , [0.9;-0.6;torad*45]); %proposed initial values
    
states{1+ 2} = struct(...
    'type', 'pose', ...
    'range' , [7;8;9],...
    'value' , [1.2;-0.1;torad*-60]); %proposed initial values


states{1+ 3} = struct(...
    'type', 'lmk', ...
    'range' , [10;11],...
    'value' , [0.5;0.2]); %proposed initial values

states{1+ 4} = struct(...
    'type', 'lmk', ...
    'range' , [12;13],...
    'value' , [2.8;0.7]); %proposed initial values

states{1+ 5} = struct(...
    'type', 'lmk', ...
    'range' , [14;15],...
    'value' , [0.4;0.9]); %proposed initial values

states{1+ 6} = struct(...
    'type', 'lmk', ...
    'range' , [16;17],...
    'value' , [1.1;-0.2]); %proposed initial values


dx = ones(17,1) * 1e6;
eps = 1e-6; 

while  norm(dx) > eps
    
    [A,r] = buildproblem(states,factor);
    dx = solvelinearized(A,r);
    
    states = updatestates(states,dx);
    
    drawmap(states,factor);
    pause(0.5); %some time between process steps
    
end
